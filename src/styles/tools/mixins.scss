/**
 * Sets a media query for the specified breakpoint
 *
 * Accepts:
 * - $media-query: {String} Breakpoint variable (list found in variables.scss)
 *
 * Usage:
 * .selector {
 *   @include media-query($medium-up) {
 *     color: red;
 *   }
 * }
 */
@mixin media-query($media-query) {
  $breakpoint-found: false;

  @each $breakpoint in $breakpoints {
    $name: nth($breakpoint, 1);
    $declaration: nth($breakpoint, 2);

    @if $media-query == $name and $declaration {
      $breakpoint-found: true;

      @media only screen and #{$declaration} {
        @content;
      }
    }
  }
}

/**
* Keyframe creators - creates a 'namespaced' keyframes object with the settings configured from args.
*/
@mixin createFadeKeyFrames ($instanceName, $startOpacity, $endOpacity) {
  @keyframes #{$instanceName} {
    0% {
      opacity: $startOpacity;
    }
    100% {
      transform: $endOpacity;
    }
  }
}

@mixin createSlideKeyFrames (
  $instanceName,
  $slideStartX: 0,
  $slideStartY: 0,
  $slideEndX: 0,
  $slideEndY: 0
  ) {
    @keyframes #{$instanceName} {
      0% {
        transform: translate($slideStartX, $slideStartY);
      }
      100% {
        transform: translate($slideEndX, $slideEndY);
      }
    }
}

/**
 * Outputs list of transition properties
 *
 * Accepts:
 * - $transitions: {String} List of transition properties to set
 *
 * Usage:
 * .selector {
 *   @include transition(width, height 0.5s ease-in);
 * }
 */
@mixin transition($transitions...) {
  $output: ();

  @each $transition in $transitions {
    $output: append($output, get-transition-properties($transition), comma);
  }
  transition: $output;
}

/**
 * Forces an element to self-clear its children
 *
 * Usage:
 * .selector {
 *   @include clearfix;
 * }
 */
@mixin clearfix() {
  &::after {
    content: '';
    display: table;
    clear: both;
  }

  // stylelint-disable-next-line
  *zoom: 1;
}

/**
 * Hide element but make it accessible to screen readers
 *
 * Usage:
 * .selector {
 *   @include visually-hidden;
 * }
 */
@mixin visually-hidden() {
  // stylelint-disable-next-line
  position: absolute !important;
  overflow: hidden;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  clip: rect(0 0 0 0);
}

/**
 * Reverse the properties applied by @mixin visually-hidden
 *
 * Accepts:
 * - $position: {String} Positioning method for element
 *
 * Usage:
 * .selector {
 *   @include visually-shown(relative);
 * }
 */
@mixin visually-shown($position: inherit) {
  // stylelint-disable-next-line
  position: $position !important;
  overflow: auto;
  width: auto;
  height: auto;
  margin: 0;
  clip: auto;
}

/**
 * Styling for a card.
 */
@mixin card {
  padding: 10px 20px;
  background: $color-product-info-bg;
  text-align: center;
  color: $color-body-text-2;
  box-shadow: 0 1px 4px 1px rgba(0, 0, 0, 0.1);
  border: 1px solid #f9f9f9;
  border-radius: 6px;
  box-sizing: border-box;
}
